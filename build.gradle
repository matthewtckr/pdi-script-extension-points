plugins {
    id 'java'
    id 'eclipse'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

version = '2.0'

repositories {
  mavenCentral()
  maven { url "https://repository.apache.org/content/repositories/releases/" }
  mavenLocal()
}

configurations {
  provided
  compile {
     extendsFrom provided
  }
  
  zip
}


dependencies {
  // Put compile-time dependencies here. This will include anything that Kettle provides that you
  // do not need to override, and usually includes kettle-core, kettle-engine, kettle-ui-swt, and metastore
  implementation("org.apache.hop:hop-core:2.7.0")
  implementation("org.apache.hop:hop-engine:2.7.0")

  // Put runtime dependencies here using the runtime() directive. Example:
  
  // Put runtime overrides of compile-time dependencies here. Often this will include the runtime() dependencies plus
  // any overrides of JARs in the normal Kettle classloader. Example:
  compile fileTree(dir: 'lib-dist', include: '*.jar')
  
  testImplementation("junit:junit:4.13.2")
}

// This task builds a PDI plugin in the correct format, a ZIP with the plugin JAR at the root and a lib/ folder containing
// all third-party dependencies
task plugin(dependsOn:jar, type: Zip) {
  into("${project.name}/") {
    from jar.outputs.files
    from fileTree(dir: 'package-res')
  }
  
  // The list of JARs in the lib/ folder is the complement of the intersection of the compile and runtime dependencies,
  // plus the JARs in the runtimeWithoutCompile config
  // The list of JARs in the lib/ folder is the complement of the intersection of the compile and runtime dependencies,
  // plus the JARs in the runtimeWithoutCompile config
  def compileDeps = configurations.compile.resolve()
  def providedDeps = configurations.provided.resolve()
  def leftovers = compileDeps - providedDeps
    into("${project.name}/lib") {
    from leftovers
  }
}

artifacts {
  zip plugin
}

task createGradleWrapper(type: Wrapper) {
  gradleVersion = '8.5'
}
